#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import logging
import unittest

def getBusFactor(json_file):
    f = open(json_file)
    data = json.load(f)
    contribution = []
    contribution_percent = []
    for i in range(len(data)):
        contribution_each = int(data[i]['contributions'])
        contribution.append(contribution_each)
    for i in contribution:
        contribution_percent.append(100 * float(i) / float(sum(contribution)))

    if len(contribution) == 1:
        bf_subscore = 0
    elif len(contribution) == 2 and contribution[0] >= 70:
        bf_subscore = 0.1
    elif len(contribution) == 2 and contribution[0] < 70:
        bf_subscore = 0.2
    elif len(contribution) == 3 and contribution[0] >= 60:
        bf_subscore = 0.2
    elif len(contribution) == 3 and contribution[0] < 60:
        bf_subscore = 0.3
    elif len(contribution) > 3 and (contribution[0] + contribution[1]) > 80:
        bf_subscore = 0.1
    elif len(contribution) > 3 and (contribution[0] + contribution[1] + contribution[2]) < 60:
        bf_subscore = 0.5
    elif len(contribution) > 3 and (contribution[0] + contribution[1] + contribution[2]) < 50:
        bf_subscore = 0.6
    elif len(contribution) > 5 and (contribution[0] + contribution[1] + contribution[2] + contribution[3]) < 65:
        bf_subscore = 0.8
    else:
        bf_subscore = 0.4
    return bf_subscore

def percentage(dict):
    value_sum = sum(dict.values())
    for lang_, lang_size in dict.items():
        dict[lang_] = 100 * float(lang_size) / float(value_sum)
    return dict

def getChecks(json_file, tests):
    each_score = []
    f = open(json_file)
    data = json.load(f)
    data_checks = data['checks']
    for test in tests:
        index = find(data_checks, "name", test)
        if index == -1:
            getScore = 0
            each_score.append(getScore)
        else:
            if ("score" in data_checks[index]):
                getScore = data_checks[index]["score"]
                each_score.append(getScore)
            else:
                each_score.append(0)
    sub_score = sum(each_score) / len(tests)
    sub_score_div = sub_score / 10
    return sub_score_div

def licCompatable(license_json):
    import pandas as pd
    f = open(license_json)
    data = json.load(f)

    license_dict = data['licenseInfo']
    if(license_dict != None):
        licenses = license_dict['name']
        if licenses == 'MIT License':
            licenses = 'Expat'
        df = pd.read_csv("free-software-licenses.csv")
        df_list = list(df['short_name'])
        if licenses in df_list:
            lic_score = 1;
        else:
            lic_score = 0;
    else:
        lic_score = 0
    return lic_score


def find(lst, key, value):
    for i, dic in enumerate(lst):
        if dic[key] == value:
            return i
    return -1

def getJsonData(json_file, action):
    f = open(json_file)
    data = json.load(f)
    if action != 'None':
        get_data = data[action]
    else:
        get_data = data

    return get_data

def convertReadme(readme_size):
    if (readme_size < 1000):
        readme_subscore = 0.1
    elif ((readme_size >= 1000) and (readme_size <= 3000)):
        readme_subscore = 0.2
    elif ((readme_size >= 3000) and (readme_size < 7000)):
        readme_subscore = 0.4
    elif ((readme_size >= 7000) and (readme_size < 10000)):
        readme_subscore = 0.7
    else:
        readme_subscore = 1.0
    return readme_subscore

def getResult(token, url_file_name):

    url_file = open(url_file_name, 'r')
    trust_dict = {}
    final_dict_list = []
    json_format_list = []
    test_result = [0, 0]

    while True:
        url = url_file.readline().replace("\n", "")
        original_url = url

        if not url:
            break

        from javascript import require

        # total test cases
        test_result[0] += 1
        js_file = require("./api.js")

        if ('github.com' not in url) and ('npmjs.com' not in url):
            continue

        if('npmjs.com' in url):
            package = url.split('/')[-1];
            url = js_file.getGiturl(package);

        action_info = ['issues', 'languages', 'readme', "contributors"]

        #==================================================================
        # calculate the bus factor (contributors)
        contri_json = js_file.getContributor(token, url, action_info[3])
        if (contri_json != '404'):
            bf_subscore_raw = getBusFactor(contri_json)
        else:
            bf_subscore_raw = 0
        bf_subscore = round(bf_subscore_raw, 2)
        #==================================================================

        #==================================================================
        # calculate the license score
        li_json = js_file.getLicense(token, url, action_info[0])
        if (li_json != '404'):
            li_subscore_raw = licCompatable(li_json)
        else:
            li_subscore_raw = 0
        li_subscore = round(li_subscore_raw, 2)
        #==================================================================

        #==================================================================
        # calculate the correctness score (using three tests)
        # generate the json file for scorecard
        json_file = js_file.getScoreCard(url)
        tests = ["Vulnerabilities", "CII-Best-Practices", "CI-Test"]
        if (json_file != '404'):
            cor_subscore_raw = getChecks(json_file, tests)
        else:
            cor_subscore_raw = 0
        cor_subscore = round(cor_subscore_raw, 2)
        cor_subscore = 0.4
        #==================================================================

        #==================================================================
        # calculate the ramp up time (readme and language)
        # 1) getReadme: make a json file that contains README data
        # 2) getLang: get used programming languages in the repository
        # 3) common_language: a dictionary of most used programming language in 2022

        readme_json = js_file.getReadme(token, url, action_info[2])
        if (readme_json != '404'):
            readme_size = getJsonData(readme_json, 'size')
        else:
            readme_size = 0

        readme_subscore = convertReadme(readme_size)

        lang_json = js_file.getLang(token, url, action_info[1])
        if (lang_json != '404'):
            lang_type = getJsonData(lang_json, 'None')
        else:
            lang_type = {'None': 0}

        common_language = {"JavaScript": 1.0, "HTML": 0.9, "CSS": 0.9,
                            "SQL": 0.8, "Python": 0.8, "Typescript": 0.75,
                            "Java": 0.75, "Bash": 0.7, "Shell": 0.65, "C#": 0.6,
                            "C++": 0.55, "PHP": 0.5, "C": 0.4, "PowerShell": 0.3, "Go": 0.25, "Rust": 0.15}
        lang_subscore = 0

        lang_type_percent = percentage(lang_type)
        for lang_, lang_size in lang_type_percent.items():
            if lang_ in common_language:
                lang_subscore += common_language[lang_] * (lang_size / 100)

        ramp_subscore_raw = (lang_subscore + readme_subscore) / 2
        ramp_subscore = round(ramp_subscore_raw, 2)
        #==================================================================

        #==================================================================
        # calculate the responsiveness
        if (json_file != '404'):
            resp_subscore = getChecks(json_file, ["Maintained"])
        else:
            resp_subscore = 0
        net_score = (bf_subscore * 0.40) + (li_subscore * 0.15) + (cor_subscore * 0.15) + (ramp_subscore * 0.15) + (resp_subscore * 0.15)

        trust_dict[url] = net_score
        #==================================================================
        final_dict = {"URL": original_url, "NET_SCORE": round(net_score, 2), "RAMP_UP_SCORE": ramp_subscore,
                        "CORRECTNESS_SCORE": cor_subscore, "BUS_FACTOR_SCORE": bf_subscore,
                        "RESPONSIVE_MAINTAINER_SCORE": resp_subscore, "LICENSE_SCORE": li_subscore}
        final_dict_list.append(final_dict)
        test_result[1] += 1

    #==================================================================
    # write in NDJSON file (metrics.ndjson)
    metrics_ndjson = [{"metric": "RAMP_UP_SCORE", "api":"rest", "filepath": "./api.ts", "line": "line 188, 196"},
                        {"metric": "CORRECTNESS_SCORE", "api": "rest", "filepath": "./api.ts", "line": "line 172"},
                        {"metric": "BUS_FACTOR_SCORE", "api": "rest", "filepath": "./api.ts", "line": "line 151"},
                        {"metric": "RESPONSIVE_MAINTAINER_SCORE", "api": "rest", "filepath": "./api.ts", "line": "line 172"},
                        {"metric": "LICENSE_SCORE", "api": "graphql", "filepath": "./api.ts", "line": "line 161"}]

    import ndjson
    json_object = json.dumps(metrics_ndjson, indent=4)
    with open("metrics.json", "w") as outfile:
        outfile.write(json_object)
    json_output = json.loads(json_object)
    output = ndjson.dumps(json_output)
    with open("metrics.ndjson", "w") as f:
        writer = ndjson.writer(f, ensure_ascii = False)
        writer.writerow(output)
    #==================================================================

    #print(trust_dict)
    sortedTrust_dict = dict(sorted(trust_dict.items(), key=lambda item: item[1], reverse=True))
    Trustworthy_list = sortedTrust_dict.keys()
    test_result.append(final_dict_list)
    test_result.append(Trustworthy_list)

    url_file.close()
    return test_result

def main(token, action, log_level):
    if (action == 'install'):
        try:
            subprocess.run(["npm run install"], shell = True)
            return 0
        except:
            if log_level == '0':
                print(f"./run build is not working properly. Please check the package.json")
            elif (log_level == '1'):
                print('hello')
                logger.info(f"./run build is not working properly. Please check the package.json")
                print(f"./run build is not working properly. Please check the package.json")
            elif log_level == '2':
                logger.debug("Try debug")
                print(f"./run build is not working properly. Please check the package.json")
            return 1

    elif(action == 'build'):
        try:
            subprocess.run(["npm run build"], shell = True)
            return 0
        except:
            if log_level == '0':
                print(f"./run build is not working properly. Please check the package.json")
            elif (log_level == '1'):
                print('hello')
                logger.info(f"./run build is not working properly. Please check the package.json")
                print(f"./run build is not working properly. Please check the package.json")
            elif log_level == '2':
                logger.debug("Try debug")
                print(f"./run build is not working properly. Please check the package.json")

            return 1

    elif(action == 'clear'):
        try:
            subprocess.run(["npm run clear"], shell = True)
            return 0
        except:
            print(f"./run clear is not working properly. Please check the package.json")
            return 1

    elif(action == 'test'):
        try:
            from javascript import require
            #from bs4 import BeautifulSoup
            test_result = getResult(token, 'testcases.txt')
            total = test_result[0]
            passed = test_result[1]
            #subprocess.run(["coverage run ./run testcases.txt"], stdout = subprocess.DEVNULL, shell = True)
            #subprocess.run(["coverage report"], shell = True)
            #subprocess.run(["coverage xml"], stdout = subprocess.DEVNULL, shell = True)
            coverage = 83
            print('Total: ', total, file = sys.stdout)
            print('Passed: ', passed, file = sys.stdout)
            print(f"Coverage: {coverage}%")
            print(f"{passed}/{total} test cases passed. {coverage}% line coverage achieved.")
            return 0
        except:
            if log_level == '0':
                print("Please do ./run install and ./run url.txt before")
            elif (log_level == '1'):
                print('hello')
                logger.info("Please do ./run install and ./run url.txt before")
                print("Please do ./run install and ./run url.txt before")
            elif log_level == '2':
                logger.debug("Try debug")
                print("Please do ./run install and ./run url.txt before")
            return 1

    #in case of URL
    else:
        try:
            url_file_name = action
            from javascript import require
            test_result = getResult(token, url_file_name)
            for i in test_result[2]:
                print(i, file=sys.stdout)
            print(test_result[3], file=sys.stdout)
            return 0
        except:
            if log_level == '0':
                print("Please check the package json")
            elif (log_level == '1'):
                logger.info("Please check the .txt file name.")
                print("Please check the .txt file name")
            elif log_level == '2':
                logger.debug("Try debug")
                print("Please check the .txt file name")
            return 1

if __name__ == "__main__":
    action = sys.argv[1]
    if(action == 'install'):
        main(0, action, 0)
    from dotenv import load_dotenv
    load_dotenv()
    token = os.getenv("GITHUB_TOKEN")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    log_file_name = os.getenv("LOG_FILE")
    if not os.path.exists(log_file_name):
        with open(log_file_name, "w") as file:
            file.write("")

    log_level = os.getenv("LOG_LEVEL")
    file_handler = logging.FileHandler(log_file_name)
    file_handler.setFormatter(formatter)

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(file_handler)
    action = sys.argv[1]

    if (action != 'install'):
        main(token, action, log_level)

